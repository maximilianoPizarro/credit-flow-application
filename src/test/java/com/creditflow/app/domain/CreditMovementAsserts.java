package com.creditflow.app.domain;

import static com.creditflow.app.domain.AssertUtils.bigDecimalCompareTo;
import static com.creditflow.app.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CreditMovementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditMovementAllPropertiesEquals(CreditMovement expected, CreditMovement actual) {
        assertCreditMovementAutoGeneratedPropertiesEquals(expected, actual);
        assertCreditMovementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditMovementAllUpdatablePropertiesEquals(CreditMovement expected, CreditMovement actual) {
        assertCreditMovementUpdatableFieldsEquals(expected, actual);
        assertCreditMovementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditMovementAutoGeneratedPropertiesEquals(CreditMovement expected, CreditMovement actual) {
        assertThat(expected)
            .as("Verify CreditMovement auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditMovementUpdatableFieldsEquals(CreditMovement expected, CreditMovement actual) {
        assertThat(expected)
            .as("Verify CreditMovement relevant properties")
            .satisfies(e ->
                assertThat(e.movementDate).as("check movementDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.movementDate)
            )
            .satisfies(e -> assertThat(e.type).as("check type").isEqualTo(actual.type))
            .satisfies(e -> assertThat(e.amount).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.amount))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.externalReference).as("check externalReference").isEqualTo(actual.externalReference));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditMovementUpdatableRelationshipsEquals(CreditMovement expected, CreditMovement actual) {
        assertThat(expected)
            .as("Verify CreditMovement relationships")
            .satisfies(e -> assertThat(e.loan).as("check loan").isEqualTo(actual.loan));
    }
}
