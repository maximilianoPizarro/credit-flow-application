package com.creditflow.app.domain;

import static com.creditflow.app.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CreditPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditPlanAllPropertiesEquals(CreditPlan expected, CreditPlan actual) {
        assertCreditPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertCreditPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditPlanAllUpdatablePropertiesEquals(CreditPlan expected, CreditPlan actual) {
        assertCreditPlanUpdatableFieldsEquals(expected, actual);
        assertCreditPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditPlanAutoGeneratedPropertiesEquals(CreditPlan expected, CreditPlan actual) {
        assertThat(expected)
            .as("Verify CreditPlan auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditPlanUpdatableFieldsEquals(CreditPlan expected, CreditPlan actual) {
        assertThat(expected)
            .as("Verify CreditPlan relevant properties")
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.type).as("check type").isEqualTo(actual.type))
            .satisfies(e ->
                assertThat(e.interestRate).as("check interestRate").usingComparator(bigDecimalCompareTo).isEqualTo(actual.interestRate)
            )
            .satisfies(e -> assertThat(e.maxTermYears).as("check maxTermYears").isEqualTo(actual.maxTermYears));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCreditPlanUpdatableRelationshipsEquals(CreditPlan expected, CreditPlan actual) {}
}
