package com.creditflow.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(expected)
            .as("Verify Client relevant properties")
            .satisfies(e -> assertThat(e.clientNumber).as("check clientNumber").isEqualTo(actual.clientNumber))
            .satisfies(e -> assertThat(e.firstName).as("check firstName").isEqualTo(actual.firstName))
            .satisfies(e -> assertThat(e.lastName).as("check lastName").isEqualTo(actual.lastName))
            .satisfies(e -> assertThat(e.dateOfBirth).as("check dateOfBirth").isEqualTo(actual.dateOfBirth))
            .satisfies(e -> assertThat(e.documentType).as("check documentType").isEqualTo(actual.documentType))
            .satisfies(e -> assertThat(e.documentNumber).as("check documentNumber").isEqualTo(actual.documentNumber))
            .satisfies(e -> assertThat(e.email).as("check email").isEqualTo(actual.email))
            .satisfies(e -> assertThat(e.phone).as("check phone").isEqualTo(actual.phone));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {}
}
