package com.creditflow.app.domain;

import static com.creditflow.app.domain.AssertUtils.bigDecimalCompareTo;
import static com.creditflow.app.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class LoanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllPropertiesEquals(Loan expected, Loan actual) {
        assertLoanAutoGeneratedPropertiesEquals(expected, actual);
        assertLoanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllUpdatablePropertiesEquals(Loan expected, Loan actual) {
        assertLoanUpdatableFieldsEquals(expected, actual);
        assertLoanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAutoGeneratedPropertiesEquals(Loan expected, Loan actual) {
        assertThat(expected)
            .as("Verify Loan auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableFieldsEquals(Loan expected, Loan actual) {
        assertThat(expected)
            .as("Verify Loan relevant properties")
            .satisfies(e -> assertThat(e.loanNumber).as("check loanNumber").isEqualTo(actual.loanNumber))
            .satisfies(e ->
                assertThat(e.openingDate).as("check openingDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.openingDate)
            )
            .satisfies(e ->
                assertThat(e.principalAmount)
                    .as("check principalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.principalAmount)
            )
            .satisfies(e ->
                assertThat(e.outstandingBalance)
                    .as("check outstandingBalance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.outstandingBalance)
            )
            .satisfies(e -> assertThat(e.status).as("check status").isEqualTo(actual.status))
            .satisfies(e ->
                assertThat(e.closingDate).as("check closingDate").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.closingDate)
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableRelationshipsEquals(Loan expected, Loan actual) {
        assertThat(expected)
            .as("Verify Loan relationships")
            .satisfies(e -> assertThat(e.client).as("check client").isEqualTo(actual.client))
            .satisfies(e -> assertThat(e.plan).as("check plan").isEqualTo(actual.plan));
    }
}
