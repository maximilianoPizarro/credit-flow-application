apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: 'credit-flow-application'
  description: 'Credit Flow monolithich for Red Hat Developer Hub'
  annotations:
    github.com/project-slug: maximilianopizarro/credit-flow-application
    backstage.io/techdocs-ref: dir:.
    backstage.io/kubernetes-namespace: credit-flow-application-dev
    backstage.io/kubernetes-id: credit-flow-application
    janus-idp.io/tekton: credit-flow-application
    backstage.io/kubernetes-label-selector: 'app=credit-flow-application'
    backstage.io/api-entity-ref: 'api:default/credit-flow-rest-api' 
    backstage.io/swagger-api: 'https://raw.githubusercontent.com/maximilianoPizarro/credit-flow-application/main/openapi.yaml'
  links:
    - title: Documentation
      url: https://github.com/maximilianoPizarro/credit-flow-application/blob/main/README.md
    - url: https://workspaces.openshift.com/#https://github.com/maximilianoPizarro/credit-flow-application/tree/main?storageType=ephemeral
      title: OpenShift Dev Spaces (VS Code)
      icon: web
  tags:
    - java
    - dev
spec:
  type: service
  lifecycle: experimental
  owner: 'group:default/maximilianopizarro'

---

apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: credit-flow-rest-api 
  description: "REST API for Credit Flow Application (Account, Clients, Loans)"
  annotations:
    backstage.io/owned-by: 'component:default/credit-flow-application' 
spec:
  type: openapi 
  lifecycle: production
  owner: 'group:default/maximilianopizarro'
  system: credit-flow-application
  definition: |
    # ðŸ‘‡ TODO el contenido de tu especificaciÃ³n OpenAPI (YAML/JSON) debe ir aquÃ­, 
    #    con la indentaciÃ³n correcta (generalmente 2 espacios) bajo el pipe (|).
    openapi: 3.0.3
    info:
      title: credit-flow-appication API
      version: 1.0.0-SNAPSHOT
    paths:
      /api/account:
        get:
          tags:
          - Account Resource
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/UserDTO"
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
        post:
          tags:
          - Account Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserDTO"
          responses:
            "200":
              description: OK
      /api/account/change-password:
        post:
          tags:
          - Account Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PasswordChangeDTO"
          responses:
            "200":
              description: OK
      /api/account/reset-password/finish:
        post:
          tags:
          - Account Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/KeyAndPasswordVM"
          responses:
            "200":
              description: OK
      /api/account/reset-password/init:
        post:
          tags:
          - Account Resource
          requestBody:
            content:
              text/plain:
                schema:
                  type: string
          responses:
            "200":
              description: OK
      /api/activate:
        get:
          tags:
          - Account Resource
          parameters:
          - name: key
            in: query
            schema:
              type: string
          responses:
            "204":
              description: No Content
      /api/admin/users:
        get:
          tags:
          - User Resource
          parameters:
          - name: sort
            in: query
            schema:
              type: string
          responses:
            "200":
              description: OK
        put:
          tags:
          - User Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserDTO"
          responses:
            "200":
              description: OK
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
        post:
          tags:
          - User Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UserDTO"
          responses:
            "200":
              description: OK
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /api/admin/users/{login}:
        get:
          tags:
          - User Resource
          parameters:
          - name: login
            in: path
            required: true
            schema:
              type: string
          responses:
            "200":
              description: OK
        delete:
          tags:
          - User Resource
          parameters:
          - name: login
            in: path
            required: true
            schema:
              type: string
          responses:
            "200":
              description: OK
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /api/authenticate:
        get:
          tags:
          - Account Resource
          responses:
            "200":
              description: OK
              content:
                text/plain:
                  schema:
                    type: string
        post:
          tags:
          - User JWT Controller
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LoginVM"
          responses:
            "200":
              description: OK
      /api/authorities:
        get:
          tags:
          - Authority Resource
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      type: string
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /api/clients:
        get:
          tags:
          - Client Resource
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/ClientDTO"
        post:
          tags:
          - Client Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClientDTO"
          responses:
            "200":
              description: OK
      /api/clients/{id}:
        get:
          tags:
          - Client Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
        put:
          tags:
          - Client Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ClientDTO"
          responses:
            "200":
              description: OK
        delete:
          tags:
          - Client Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
      /api/credit-movements:
        get:
          tags:
          - Credit Movement Resource
          parameters:
          - name: page
            in: query
            schema:
              format: int32
              default: 0
              minimum: 0
              exclusiveMinimum: true
              type: integer
          - name: size
            in: query
            schema:
              format: int32
              default: 50
              minimum: 0
              exclusiveMinimum: true
              type: integer
          - name: sort
            in: query
            schema:
              type: array
              items:
                type: string
          responses:
            "200":
              description: OK
        post:
          tags:
          - Credit Movement Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreditMovementDTO"
          responses:
            "200":
              description: OK
      /api/credit-movements/{id}:
        get:
          tags:
          - Credit Movement Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
        put:
          tags:
          - Credit Movement Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreditMovementDTO"
          responses:
            "200":
              description: OK
        delete:
          tags:
          - Credit Movement Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
      /api/credit-plans:
        get:
          tags:
          - Credit Plan Resource
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/CreditPlanDTO"
        post:
          tags:
          - Credit Plan Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreditPlanDTO"
          responses:
            "200":
              description: OK
      /api/credit-plans/{id}:
        get:
          tags:
          - Credit Plan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
        put:
          tags:
          - Credit Plan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreditPlanDTO"
          responses:
            "200":
              description: OK
        delete:
          tags:
          - Credit Plan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
      /api/loans:
        get:
          tags:
          - Loan Resource
          parameters:
          - name: page
            in: query
            schema:
              format: int32
              default: 0
              minimum: 0
              exclusiveMinimum: true
              type: integer
          - name: size
            in: query
            schema:
              format: int32
              default: 50
              minimum: 0
              exclusiveMinimum: true
              type: integer
          - name: sort
            in: query
            schema:
              type: array
              items:
                type: string
          responses:
            "200":
              description: OK
        post:
          tags:
          - Loan Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LoanDTO"
          responses:
            "200":
              description: OK
      /api/loans/{id}:
        get:
          tags:
          - Loan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
        put:
          tags:
          - Loan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LoanDTO"
          responses:
            "200":
              description: OK
        delete:
          tags:
          - Loan Resource
          parameters:
          - name: id
            in: path
            required: true
            schema:
              format: int64
              type: integer
          responses:
            "200":
              description: OK
      /api/register:
        post:
          tags:
          - Account Resource
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ManagedUserVM"
          responses:
            "200":
              description: OK
              content:
                application/json: {}
      /management/configprops:
        get:
          tags:
          - J Hipster Configuration Endpoint
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ConfigPropsVM"
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /management/env:
        get:
          tags:
          - J Hipster Configuration Endpoint
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/EnvVM"
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /management/info:
        get:
          tags:
          - Management Info Resource
          responses:
            "200":
              description: OK
      /management/jhimetrics:
        get:
          tags:
          - J Hipster Metrics Endpoint
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: object
                    additionalProperties:
                      type: object
      /management/loggers:
        get:
          tags:
          - J Hipster Loggers Endpoint
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/LoggersWrapper"
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /management/loggers/{name}:
        post:
          tags:
          - J Hipster Loggers Endpoint
          parameters:
          - name: name
            in: path
            required: true
            schema:
              type: string
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LoggerVM"
          responses:
            "200":
              description: OK
            "401":
              description: Not Authorized
            "403":
              description: Not Allowed
          security:
          - SecurityScheme: []
      /management/threaddump:
        get:
          tags:
          - J Hipster Metrics Endpoint
          responses:
            "200":
              description: OK
              content:
                application/json:
                  schema:
                    type: object
                    additionalProperties:
                      type: array
                      items: {}
    components:
      schemas:
        ClientDTO:
          required:
          - clientNumber
          - firstName
          - lastName
          - dateOfBirth
          - documentType
          - documentNumber
          type: object
          properties:
            id:
              format: int64
              type: integer
            clientNumber:
              format: int64
              type: integer
            firstName:
              type: string
            lastName:
              type: string
            dateOfBirth:
              $ref: "#/components/schemas/LocalDate"
            documentType:
              $ref: "#/components/schemas/DocumentType"
            documentNumber:
              type: string
            email:
              type: string
            phone:
              type: string
        ConfigPropsVM:
          type: object
          properties:
            contexts:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Context"
        Context:
          type: object
          properties:
            beans:
              type: object
              additionalProperties: {}
        CreditMovementDTO:
          required:
          - movementDate
          - type
          - amount
          type: object
          properties:
            id:
              format: int64
              type: integer
            movementDate:
              $ref: "#/components/schemas/ZonedDateTime"
            type:
              $ref: "#/components/schemas/MovementType"
            amount:
              type: number
            description:
              type: string
            externalReference:
              type: string
            loanId:
              format: int64
              type: integer
            loan:
              type: string
        CreditPlanDTO:
          required:
          - name
          - type
          - interestRate
          type: object
          properties:
            id:
              format: int64
              type: integer
            name:
              type: string
            description:
              type: string
            type:
              $ref: "#/components/schemas/PlanType"
            interestRate:
              type: number
            maxTermYears:
              format: int32
              type: integer
        DocumentType:
          enum:
          - NATIONAL_ID
          - PASSPORT
          - RESIDENCE_PERMIT
          - OTHER
          type: string
        EnvVM:
          type: object
          properties:
            activeProfiles:
              type: array
              items:
                type: string
            propertySources:
              type: array
              items:
                $ref: "#/components/schemas/PropertySource"
        Instant:
          format: date-time
          type: string
          example: 2022-03-10T16:15:50Z
        KeyAndPasswordVM:
          type: object
          properties:
            key:
              type: string
            newPassword:
              type: string
        LoanDTO:
          required:
          - loanNumber
          - openingDate
          - principalAmount
          - status
          type: object
          properties:
            id:
              format: int64
              type: integer
            loanNumber:
              type: string
            openingDate:
              $ref: "#/components/schemas/ZonedDateTime"
            principalAmount:
              type: number
            outstandingBalance:
              type: number
            status:
              $ref: "#/components/schemas/LoanStatus"
            closingDate:
              $ref: "#/components/schemas/ZonedDateTime"
            clientId:
              format: int64
              type: integer
            client:
              type: string
            planId:
              format: int64
              type: integer
            plan:
              type: string
        LoanStatus:
          enum:
          - ACTIVE
          - OVERDUE
          - CANCELLED
          - PAID
          - COLLECTIONS
          type: string
        LocalDate:
          format: date
          type: string
          example: 2022-03-10
        LoggerVM:
          type: object
          properties:
            name:
              type: string
            effectiveLevel:
              type: string
            configuredLevel:
              type: string
        LoggersWrapper:
          type: object
          properties:
            loggers:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/LoggerVM"
        LoginVM:
          required:
          - username
          - password
          type: object
          properties:
            username:
              maxLength: 50
              minLength: 1
              type: string
            password:
              maxLength: 100
              minLength: 4
              type: string
            rememberMe:
              type: boolean
        ManagedUserVM:
          required:
          - login
          type: object
          properties:
            id:
              format: int64
              type: integer
            login:
              maxLength: 50
              minLength: 1
              pattern: "^[_.@A-Za-z0-9-]*$"
              type: string
            firstName:
              maxLength: 50
              type: string
            lastName:
              maxLength: 50
              type: string
            email:
              maxLength: 254
              minLength: 5
              type: string
            imageUrl:
              maxLength: 256
              type: string
            activated:
              type: boolean
            langKey:
              maxLength: 10
              minLength: 2
              type: string
            createdBy:
              type: string
            createdDate:
              $ref: "#/components/schemas/Instant"
            lastModifiedBy:
              type: string
            lastModifiedDate:
              $ref: "#/components/schemas/Instant"
            authorities:
              uniqueItems: true
              type: array
              items:
                type: string
            password:
              maxLength: 100
              minLength: 4
              type: string
        MovementType:
          enum:
          - PAYMENT
          - CHARGE
          - INSTALLMENT
          - INTEREST
          - COMMISSION
          type: string
        PasswordChangeDTO:
          type: object
          properties:
            currentPassword:
              type: string
            newPassword:
              type: string
        PlanType:
          enum:
          - MORTGAGE
          - PERSONAL
          - AUTO
          - CREDIT_CARD
          - REVOLVING
          type: string
        PropertySource:
          type: object
          properties:
            name:
              type: string
            properties:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/PropertyValue"
        PropertyValue:
          type: object
          properties:
            value:
              type: string
        UserDTO:
          required:
          - login
          type: object
          properties:
            id:
              format: int64
              type: integer
            login:
              maxLength: 50
              minLength: 1
              pattern: "^[_.@A-Za-z0-9-]*$"
              type: string
            firstName:
              maxLength: 50
              type: string
            lastName:
              maxLength: 50
              type: string
            email:
              maxLength: 254
              minLength: 5
              type: string
            imageUrl:
              maxLength: 256
              type: string
            activated:
              type: boolean
            langKey:
              maxLength: 10
              minLength: 2
              type: string
            createdBy:
              type: string
            createdDate:
              $ref: "#/components/schemas/Instant"
            lastModifiedBy:
              type: string
            lastModifiedDate:
              $ref: "#/components/schemas/Instant"
            authorities:
              uniqueItems: true
              type: array
              items:
                type: string
        ZonedDateTime:
          format: date-time
          type: string
          example: 2022-03-10T12:15:50-04:00
      securitySchemes:
        SecurityScheme:
          type: http
          description: Authentication
          scheme: bearer
          bearerFormat: JWT
